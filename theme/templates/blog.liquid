{% paginate blog.articles by 5 %}

<header>
<h1 class="tc fw4 tracked">{{ blog.title }}</h1>

    {% if blog.tags.size > 0 %}
      <div class="bb b--black-20 mb2 pb3">
        <label for="tag-filter" class="dn fw3 lh-copy f5 pb1">Filter by:</label>
        <div class="custom-select mw6 center">
          <select
            id="tag-filter"
            aria-describedby="a11y-refresh-page-message a11y-selection-message"
            class=""
            >
            <option value="{{ blog.url }}">All topics</option>
            {% for tag in blog.all_tags %}
              <option
                value="{{ blog.url }}/tagged/{{ tag | handleize }}"
                {% if current_tags contains tag %}selected{% endif %}
                >
                {{ tag | downcase }}
              </option>
            {% endfor %}
          </select>
        </div>
      </div>
    {% endif %}
</header>

{% for article in blog.articles %}
  <article class="bb b--black-10 pv2">
    <div class="flex flex-column flex-row-ns">
      <div class="pr3-ns mb2 mb0-ns w-100 w-25-ns">
        {% if article.image %}
          <a
            class="db no-underline black dim"
            href="{{ article.url }}"
            title="{{ article.title | escape }}"
            >
            {{ article.image | img_url: '345x345', scale: 2 | img_tag: article.title }}
          </a>
        {% else %}
          {% include 'icon-image-blank' %}
        {% endif %}
      </div>
      <div class="w-100 w-75-ns pl3-ns">
        <h1 class="f3 fw1 mt0 lh-title">
          {{ article.title | link_to: article.url | replace: 'href', 'class="link dim black-70" href' }}
        </h1>
        <p class="f6 f5-l lh-copy black-80">
          {% if article.excerpt.size > 0 %}
            {{ article.excerpt }}
          {% else %}
            {{ article.content | strip_html | truncate: 150 }}
          {% endif %}
        </p>

        {% if article.tags.size > 0 %}
          <div>
            {% for tag in article.tags %}
              <a 
               href="{{ blog.url }}/tagged/{{ tag | handle }}"
               class="link underline black-70"
               >
               {{ tag | downcase }}</a>{% unless forloop.last %},&nbsp;{% endunless %}
            {% endfor %}
          </div>
        {% endif %}

        <div class="tr">
          <a href="{{ article.url }}"
             class="link f7 fw4 br2 ba b--debut-brown bg-debut-brown debut-yellow pa2 ttu"
             >
             Read more
          </a>
        </div>

      </div>
    </div>
  </article>
{% endfor %}

{% if paginate.pages > 1 %}
  {{ paginate | default_pagination }}
{% endif %}

{% endpaginate %}
<script>
function doSelect() {
  /* look for any elements with the class "custom-select": */
  const wrapperDiv = document.querySelector(".custom-select");
  /* get the select element */
  //el.querySelectorAll("select").forEach(selEl => {});
  const selEl = wrapperDiv.querySelector("select");
  /* for each element, create a new DIV that will act as the selected item: */
  const newDiv = document.createElement("DIV");
  newDiv.classList.add("select-selected");
  const selectedValue = selEl.options[selEl.selectedIndex].innerHTML;
  newDiv.innerHTML = selectedValue;
  wrapperDiv.appendChild(newDiv);

  /* for each element, create a new DIV that will contain the option list: */
  const optListDiv = document.createElement("DIV");
  optListDiv.classList.add("select-items", "select-hide");

  selEl.querySelectorAll("option").forEach(opt => {
    if (opt.innerHTML !== selectedValue) {
      /* create a new DIV that will act as an option item: */
      optDiv = document.createElement("DIV");
      optDiv.innerHTML = opt.innerHTML;
      optDiv.addEventListener("click", function(e) {
        /*when an item is clicked, update the original select box,and the selected item:*/
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        const thisSelect = e.target.parentNode.parentNode.querySelector("select");
        thisSelect.querySelectorAll("option").forEach(el => {
          if (el.innerHTML == e.target.innerHTML) {
            window.location = el.value;
            console.log(el.value);
          }
        });
        this.parentNode.previousSibling.click(); // only useful if actually a form
      });
      optListDiv.appendChild(optDiv);
    }
  });
  wrapperDiv.appendChild(optListDiv);
  newDiv.addEventListener("click", function(e) {
    /*when the select box is clicked, close any other select boxes, and open/close the current select box:*/
    e.stopPropagation();
    closeAllSelect(this);
    this.nextSibling.classList.toggle("select-hide");
    this.classList.toggle("select-arrow-active");
    this.classList.toggle("bottom-radius");
  });
  return;
};
function closeAllSelect(elmnt) {
  /*a function that will close all select boxes in the document, except the current select box:*/
  const elements = [];
  document.querySelectorAll(".select-selected").forEach((el, idx) => {
    if (elmnt === el) {
      elements.push(idx);
    } else {
      el.classList.remove("select-arrow-active");
      el.classList.remove("bottom-radius");
    }
  });
  document.querySelectorAll(".select-items").forEach((el, idx) => {
    if (elements.indexOf(idx)) el.classList.add("select-hide");
  });
  return;
}
/*if the user clicks anywhere outside the select box, then close all select boxes:*/
document.addEventListener("click", closeAllSelect);
document.addEventListener("DOMContentLoaded", doSelect);
</script>
